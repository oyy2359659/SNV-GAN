import numpy as npimport pandas as pdimport torchimport model1import train1import timefrom Download import DownloadMimport sysfrom Save import fake_data_save# from torch.autograd import Variable# from imblearn.over_sampling import SMOTE# from sklearn.ensemble import RandomForestClassifier# from sklearn.model_selection import train_test_split# import matplotlib.pyplot as pltimport torch.nn as nn# !!! Minimizes MSE instead of BCEadversarial_loss = torch.nn.BCELoss()#adversarial_loss = torch.nn.MSELoss()from torch.autograd import VariableTensor =torch.FloatTensor#参数：gene_number= 211   #1:244   5:211   2:223# 超参数LR_G = 0.0003          # G生成器的学习率LR_D = 0.0003          # D判别器的学习率N_IDEAS = 100            # G生成器的初始想法(随机灵感)Dropout_parm = 0.5   #dropout函数里的参数 #BiLi = 0.5TPBL = 0#BiLi = {"BRCA":0.3,"LUAD":0.5,"BLCA":0.7}  #{"BRCA":0.3,"LUAD":0.15,"BLCA":0.6}  5{"BRCA":0.3,"LUAD":0.5,"BLCA":0.7} #BiLi = {"BRCA":0.7,"LUAD":0.7,"BLCA":0.6} #xiaorongshiyan3#BiLi = {"BRCA":0.2,"LUAD":0.4,"BLCA":0.4}  #xiaorongshiyan1#BiLi = {"BRCA":0.4,"LUAD":0.6,"BLCA":0.5} #xiaorongshiyan2BiLi = {"BRCA":0.5,"LUAD":0.3,"BLCA":0.8} #xiaorongshiyan4# Samplenum = 95  #真实样本数量# Xbatch = int(Samplenum *BiLi)  # 抽取多少个样本# BATCH_SIZE = Xbatch# n_generate = int(394/Xbatch) + 1    #需要生成的样本数489-95# real_label = Variable(torch.ones(Samplenum))  # 定义真实label为1# fake_label = Variable(torch.zeros(Samplenum))A = sys.argvdef get_random_realData(arr,batch):    #arr = np.array(data)    # 获取行数    col_rand_array = np.arange(arr.shape[0])    #print(len(col_rand_array))    # 随机打乱    np.random.shuffle(col_rand_array)    #print(col_rand_array[0:batch])    #获取打乱后的前batch个样本    samplerand = arr[col_rand_array[0:batch],:]    return sampleranddef checkMAX(B):    MAX_index = 0    MAX = 0    for i in range(0,len(B)):        if B[i] > MAX:            MAX = B[i]            MAX_index = i    return MAX,MAX_index+1if __name__ == '__main__':    B = []    timestr = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time()))    for i in range(1, len(A)):        path = "data/5/" + A[i] + ".txt"        M, Sample, gene_name, stay_line = DownloadM(path)        B.append(len(Sample))        print("{}的样本数：{}".format(A[i], len(Sample)))    MAXSample, MAX_index = checkMAX(B)    #print(MAXSample, MAX_index)    for i in range(1, len(A)):        if i == MAX_index:            continue        path = "data/5/" + A[i] + ".txt"        cancer = A[i].split("_")[0]        M, Sample, gene_name, stay_line = DownloadM(path)        Samplenum = len(Sample)  # 真实样本数量        print("{}的样本数：{}".format(A[i], len(Sample)))        Xbatch = int(Samplenum * BiLi[cancer])        #Xbatch = Samplenum  # 抽取多少个样本        BATCH_SIZE = Xbatch        #n_generate = (int((MAXSample-Samplenum) / Xbatch) + 1)*2        n_generate = (int((MAXSample-Samplenum) / Xbatch) + 1)        TPBL = 0#sum(M[:,190])/len(M)        print("正在生成癌症{}数据---------------------------------".format(cancer))        print("真实样本数量 = {}".format(Samplenum))        print("抽取样本数量 = {}".format(BATCH_SIZE))        print("需要生成的样本数量 = {}".format(n_generate))        print("TP53的比例 = {}".format(TPBL))        for epoch in range(n_generate):            X = []            print("第{}个model训练：".format(epoch))            for n in range(0,64):                X_ = get_random_realData(M, BATCH_SIZE)  #随机抽样                while True:                    X_ = get_random_realData(M, BATCH_SIZE)  #随机抽样                    #print(gene_name[0])                    b = X_[:,190]  #1中TP53位置：204    5中TP53位置：190                    #print(sum(b))                    if sum(b)/BATCH_SIZE >=TPBL:                        break                #print(type(X_))                X.append(X_) #放入train.py训练的数据            X_for_generate = torch.tensor(np.array(X), requires_grad=True)            #print(X_for_generate.shape)            # X_for_generate = X_for_generate.detach().numpy().reshape(100,-1)            # print(X_for_generate.shape)            train1.train(X_for_generate, gene_number, BATCH_SIZE, Dropout_parm, LR_D, LR_G, gene_name, epoch,N_IDEAS,BiLi, timestr,TPBL,cancer)