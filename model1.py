import torchimport torch.nn as nnimport torchvisionimport torch.nn.functional as Ffrom torchvision import datasetsfrom torchvision import transformsfrom torchvision.utils import save_imagefrom torch.autograd import Variabledef discriminator(x):    print("discriminator={}".format(x))    D = nn.Sequential(                nn.Linear(x, 256),        nn.ReLU(True),        nn.Linear(256, 128),        nn.ReLU(True),        nn.Linear(128, 64),        nn.ReLU(True),        nn.Linear(64, 16),        nn.ReLU(True),        nn.Linear(16, 1),        nn.Sigmoid()    )    return Ddef generator(z,Dropout_parm,S):    print("generator={}-{}".format(z,Dropout_parm))    G = nn.Sequential(  # 生成器        nn.Linear(z, 128),        nn.Dropout(Dropout_parm),        nn.ReLU(True),        nn.Linear(128, 256),        nn.Dropout(Dropout_parm),        nn.ReLU(True),        nn.Linear(256, 512),        nn.Dropout(Dropout_parm),        nn.ReLU(True),        nn.Linear(512, 1024),        nn.Dropout(Dropout_parm),        nn.ReLU(True),        nn.Linear(1024, S),        # nn.Dropout(Dropout_parm),        # nn.Softsign(),        #nn.ReLU(),        nn.Sigmoid()    )    return G